# 1.Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого
# элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя,
# а указать явно, в программе.

my_list = [2, 3, 'hello', 256, None, 45.6, True]
i = 0

while i < len(my_list):
    print(f'Элемент списка {my_list[i]}, является {type(my_list[i])}')
    i += 1

# 2.Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с
# индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().


count_list = int(input('Сколько элементов планируется добавить в список?: '))
my_list = []
i = 0
j = 0

while i < count_list:
    element_list = input(f'Введите элемент {i + 1}: ')
    my_list.append(element_list)
    i += 1

print(my_list)

if count_list % 2 != 0:
    count_list = count_list - 1

while j < count_list:
    my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]
    j += 2

print(my_list)

# 3.Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится
# месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

mounth = int(input('Введите число месяца: '))

# Решение через list
season = ['Зима', 'Весна', 'Лето', 'Осень']
if mounth == 1 or mounth == 2 or mounth == 12:
    print(season[0])
elif 3 <= mounth < 6:
    print(season[1])
elif 6 <= mounth < 9:
    print(season[2])
elif 9 <= mounth < 12:
    print(season[3])
else:
    print('Такого месяца не существует!')

# Решение через dict
mounth_dict = {
    1: 'Зима', 2: 'Зима', 12: 'Зима',
    3: 'Весна', 4: 'Весна', 5: 'Весна',
    6: 'Лето', 7: 'Лето', 8: 'Лето',
    9: 'Осень', 10: 'Осень', 11: 'Осень',
}

if 1 <= mounth < 13:
    print(mounth_dict.get(mounth))
else:
    print('Такого месяца не существует')


# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.


user_str = input('Введите строку: ')
user_str = user_str.split()

for ind, el in enumerate(user_str):
    print(ind + 1, el[:10])

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми
# значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]

while len(my_list) < 10:
    num = int(input('Введите число: '))
    if my_list.count(num) != 0:
        ind = my_list.index(num)
        my_list.insert(ind, num)
        print(f'Пользователь ввел число {num}. Результат: {my_list}')
    elif num > my_list[0]:
        my_list.insert(0, num)
        print(f'Пользователь ввел число {num}. Результат: {my_list}')
    else:
        my_list.append(num)
        print(f'Пользователь ввел число {num}. Результат: {my_list}')


# 6. Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и
# словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). Структуру нужно
# сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
#     (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
#     (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
#     (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
#     “название”: [“компьютер”, “принтер”, “сканер”],
#     “цена”: [20000, 6000, 2000],
#     “количество”: [5, 2, 7],
#     “ед”: [“шт.”]
# }


price_list = []
keys_list = []
product_dict = {}
pos = 1
add_items = 'y'

while add_items != 'n':  # Заполняем словарь
    product_dict = {'Название': input('Введите название товара: '),
                    'Цена': int(input('Введите цену товара: ')),
                    'Кол-во': int(input('Введите кол-во товара шт.: ')),
                    'Ед.изм': 'шт.'
                    }

    product_tuple = (pos, product_dict)
    price_list.append(product_tuple)

    pos += 1
    add_items = input('Добавить еще позицию? (y/n): ')

for key, value in product_dict.items():   # Получаем ключи для сбора аналитики
    keys_list.append(key)

count = 0
result_dict = {}

while count < len(keys_list):   # Собираем аналитику
    i = 0
    value_list = []
    product_list = []
    while i < len(price_list):
        product = price_list[i][1].get(keys_list[count])
        product_list.append(product)
        i += 1
    result_dict[keys_list[count]] = product_list
    count += 1

for key, value in result_dict.items():    # Выводим "симпатично" на экран
    print(f"{key} : {value}")
