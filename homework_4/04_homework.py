# -*- coding: utf-8 -*-
# The above encoding declaration is required and the file must be saved as UTF-8

__author__ = "Alexey_Khlybov"

from lesson_4.less4_myfunc import payroll, multiplic, generator, fact   # При этом пути до модуля, запускаются скрипты в Pych
# from less4_myfunc import payroll    # При таком пути запускается скрипт через bash
from sys import argv
import random
from functools import reduce
from itertools import count, cycle

"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия. Для выполнения расчета для
конкретных значений необходимо запускать скрипт с параметрами.
"""


script_name, hours_worked, rate, prize = argv
print(payroll(int(hours_worked), int(rate), int(prize)))


"""
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].

"""

user_num = int(input('Последовательность из скольки чисел будум сравнивать?: '))
i = 0  # Счетчик
num_list = []

# Формируем исходный список
while i < user_num:
    num_list.append(random.randint(0, 100))
    i += 1
print(num_list)

result_list = []
i = 0

# Формируем список элементов, значения которых больше предыдущих
while i < len(num_list):
    try:
        if num_list[i] < num_list[i + 1]:
            result_list.append(num_list[i + 1])
            i += 1
        else:
            i += 1
            continue
    except IndexError:
        break
print(result_list)

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""

print([el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0])

"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, 
соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания 
обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""

n = int(input('Сколько чисел будет в последовательности? : '))
elements = 0
elem_list = []

# Формируем исходную последовательность чисел
while elements < n:
    elem_list.append(random.randrange(1, 30, 2))
    elements += 1
print(f'Исхоодная последовательность: {elem_list}')

result_list =[]

# Формируем последовательность чисел не имеющих повторений
for el in elem_list:
    if elem_list.count(el) < 2:
        result_list.append(el)
print(f'Результирующая последовательность: {result_list}')


"""
5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные 
числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""

num = int(input('Введите кол-во элементов списка: '))
j = 0           # Счетчик
new_uselist = []

while j < num:
    el_list = random.choice([el for el in range(100, 1001) if el % 2 == 0])
    new_uselist.append(el_list)
    j += 1

print(new_uselist)
print(reduce(multiplic, new_uselist))


"""
6. Реализовать два небольших скрипта: 
а) итератор, генерирующий целые числа, начиная с указанного, 
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый 
цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения. 
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""

# a

start = int(input('Введите число: '))
i = 0           # Счетчик

for el in count(start):
    if i > 10:
        break
    else:
        i += 1
        print(el)

# b

start_list = input('Введите последовательность через пробел: \n ').split()
i = 0           # Счетчик

for el in cycle(start_list):
    if i > 10:
        break
    else:
        i += 1
        print(el)


"""
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, 
начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""

while True:
    try:
        n = int(input('Введите натуральное число: '))
        if n > 0:
            for el in fact(generator(n)):
                print(el)
            break
        else:
            print('Ошибка ввода! Введите натуральное число.')
    except ValueError:
        print('Ошибка ввода! Введите натуральное число.')
